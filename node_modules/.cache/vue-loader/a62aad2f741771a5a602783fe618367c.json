{"remainingRequest":"/home/chemoune/Bureau/vue-project/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/chemoune/Bureau/vue-project/node_modules/vuetable/src/components/Vuetable.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/chemoune/Bureau/vue-project/node_modules/vuetable/src/components/Vuetable.vue","mtime":1486047229000},{"path":"/home/chemoune/Bureau/vue-project/node_modules/cache-loader/dist/cjs.js","mtime":1544640643324},{"path":"/home/chemoune/Bureau/vue-project/node_modules/babel-loader/lib/index.js","mtime":1544640643152},{"path":"/home/chemoune/Bureau/vue-project/node_modules/cache-loader/dist/cjs.js","mtime":1544640643324},{"path":"/home/chemoune/Bureau/vue-project/node_modules/vue-loader/lib/index.js","mtime":1544640646048}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nexport default {\r\n    props: {\r\n        wrapperClass: {\r\n            type: String,\r\n            default: function() {\r\n                return null\r\n            }\r\n        },\r\n        tableWrapper: {\r\n            type: String,\r\n            default: function() {\r\n                return null\r\n            }\r\n        },\r\n        tableClass: {\r\n            type: String,\r\n            default: function() {\r\n                return 'ui blue striped selectable celled stackable attached table'\r\n            }\r\n        },\r\n        loadingClass: {\r\n            type: String,\r\n            default: function() {\r\n                return 'loading'\r\n            }\r\n        },\r\n        dataPath: {\r\n            type: String,\r\n            default: function() {\r\n                return 'data'\r\n            }\r\n        },\r\n        paginationPath: {\r\n            type: String,\r\n            default: function() {\r\n                return 'links.pagination'\r\n            }\r\n        },\r\n        fields: {\r\n            type: Array,\r\n            required: true\r\n        },\r\n        apiUrl: {\r\n            type: String,\r\n            required: true\r\n        },\r\n        sortOrder: {\r\n            type: Array,\r\n            default: function() {\r\n                return [];\r\n            }\r\n        },\r\n        multiSort: {\r\n            type: Boolean,\r\n            default: function() {\r\n                return false\r\n            }\r\n        },\r\n        /*\r\n         * physical key that will trigger multi-sort option\r\n         * possible values: 'alt', 'ctrl', 'meta', 'shift'\r\n         * 'ctrl' might not work as expected on Mac\r\n         */\r\n        multiSortKey: {\r\n            type: String,\r\n            default: 'alt'\r\n        },\r\n        perPage: {\r\n            type: Number,\r\n            coerce: function(val) {\r\n                return parseInt(val)\r\n            },\r\n            default: function() {\r\n                return 10\r\n            }\r\n        },\r\n        ascendingIcon: {\r\n            type: String,\r\n            default: function() {\r\n                return 'blue chevron up icon'\r\n            }\r\n        },\r\n        descendingIcon: {\r\n            type: String,\r\n            default: function() {\r\n                return 'blue chevron down icon'\r\n            }\r\n        },\r\n        appendParams: {\r\n            type: Array,\r\n            default: function() {\r\n                return []\r\n            }\r\n        },\r\n        showPagination: {\r\n            type: Boolean,\r\n            default: function() {\r\n                return true\r\n            }\r\n        },\r\n        paginationComponent: {\r\n            type: String,\r\n            default: function() {\r\n                return 'vuetable-pagination'\r\n            }\r\n        },\r\n        paginationInfoTemplate: {\r\n            type: String,\r\n            default: function() {\r\n                return \"Displaying {from} to {to} of {total} items\"\r\n            }\r\n        },\r\n        paginationInfoNoDataTemplate: {\r\n            type: String,\r\n            default: function() {\r\n                return 'No relevant data'\r\n            }\r\n        },\r\n        paginationClass: {\r\n            type: String,\r\n            default: function() {\r\n                return 'ui bottom attached segment grid'\r\n            }\r\n        },\r\n        paginationInfoClass: {\r\n            type: String,\r\n            default: function() {\r\n                return 'left floated left aligned six wide column'\r\n            }\r\n        },\r\n        paginationComponentClass: {\r\n            type: String,\r\n            default: function() {\r\n                return 'right floated right aligned six wide column'\r\n            }\r\n        },\r\n        paginationConfig: {\r\n            type: String,\r\n            default: function() {\r\n                return 'paginationConfig'\r\n            }\r\n        },\r\n        paginationConfigCallback: {\r\n            type: String,\r\n            default: function() {\r\n                return 'paginationConfig'\r\n            }\r\n        },\r\n        itemActions: {\r\n            type: Array,\r\n            default: function() {\r\n                return []\r\n            }\r\n        },\r\n        queryParams: {\r\n            type: Object,\r\n            default: function() {\r\n                return {\r\n                    sort: 'sort',\r\n                    page: 'page',\r\n                    perPage: 'per_page'\r\n                }\r\n            }\r\n        },\r\n        loadOnStart: {\r\n            type: Boolean,\r\n            default: function() {\r\n                return true\r\n            }\r\n        },\r\n        selectedTo: {\r\n            type: Array,\r\n            default: function() {\r\n                return []\r\n            }\r\n        },\r\n        httpOptions: {\r\n            type: Object,\r\n            default: function() {\r\n                return {}\r\n            }\r\n        },\r\n        detailRow: {\r\n            type: String,\r\n            default: ''\r\n        },\r\n        detailRowCallback: {\r\n            type: String,\r\n            default: ''\r\n        },\r\n        detailRowId: {\r\n            type: String,\r\n            default: 'id'\r\n        },\r\n        detailRowTransition: {\r\n            type: String,\r\n            default: ''\r\n        },\r\n        detailRowClass: {\r\n            type: String,\r\n            default: 'vuetable-detail-row'\r\n        },\r\n        detailRowComponent: {\r\n            type: String,\r\n            default: ''\r\n        },\r\n        rowClassCallback: {\r\n            type: String,\r\n            default: ''\r\n        },\r\n    },\r\n    data: function() {\r\n        return {\r\n            eventPrefix: 'vuetable:',\r\n            tableData: null,\r\n            tablePagination: null,\r\n            currentPage: 1,\r\n            visibleDetailRows: []\r\n        }\r\n    },\r\n    directives: {\r\n        'attr': {\r\n            update: function(value) {\r\n                for (var i in value) {\r\n                    this.el.setAttribute(i, value[i])\r\n                }\r\n            }\r\n        },\r\n    },\r\n    computed: {\r\n        paginationInfo: function() {\r\n            if (this.tablePagination == null || this.tablePagination.total == 0) {\r\n                return this.paginationInfoNoDataTemplate\r\n            }\r\n\r\n            return this.paginationInfoTemplate\r\n                .replace('{from}', this.tablePagination.from || 0)\r\n                .replace('{to}', this.tablePagination.to || 0)\r\n                .replace('{total}', this.tablePagination.total || 0)\r\n        },\r\n        useDetailRow: function() {\r\n            if (this.tableData && typeof this.tableData[0][this.detailRowId] === 'undefined') {\r\n                console.warn('You need to define \"detail-row-id\" in order for detail-row feature to work!')\r\n                return false\r\n            }\r\n\r\n            return this.detailRowCallback.trim() !== '' || this.detailRowComponent !== ''\r\n        },\r\n        useDetailRowComponent: function() {\r\n            return this.detailRowComponent !== ''\r\n        },\r\n        countVisibleFields: function() {\r\n            return this.fields.filter(function (field) {\r\n                return field.visible\r\n            }).length\r\n        }\r\n    },\r\n    methods: {\r\n        normalizeFields: function() {\r\n            var self = this\r\n            var obj\r\n            this.fields.forEach(function(field, i) {\r\n                if (typeof (field) === 'string') {\r\n                    obj = {\r\n                        name: field,\r\n                        title: self.setTitle(field),\r\n                        titleClass: '',\r\n                        dataClass: '',\r\n                        callback: null,\r\n                        visible: true\r\n                    }\r\n                } else {\r\n                    obj = {\r\n                        name: field.name,\r\n                        title: (field.title === undefined) ? self.setTitle(field.name) : field.title,\r\n                        sortField: field.sortField,\r\n                        titleClass: (field.titleClass === undefined) ? '' : field.titleClass,\r\n                        dataClass: (field.dataClass === undefined) ? '' : field.dataClass,\r\n                        callback: (field.callback === undefined) ? '' : field.callback,\r\n                        visible: (field.visible === undefined) ? true : field.visible\r\n                    }\r\n                }\r\n                self.fields.$set(i, obj)\r\n            })\r\n        },\r\n        setTitle: function(str) {\r\n            if (this.isSpecialField(str)) {\r\n                return ''\r\n            }\r\n\r\n            return this.titleCase(str)\r\n        },\r\n        titleCase: function(str)\r\n        {\r\n            return str.replace(/\\w+/g, function(txt){\r\n                return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase()\r\n            })\r\n        },\r\n        notIn: function(str, arr) {\r\n            return arr.indexOf(str) === -1\r\n        },\r\n        loadData: function() {\r\n            var self = this\r\n\r\n            var wrapper = document.querySelector(this.tableWrapper)\r\n            this.showLoadingAnimation(wrapper)\r\n\r\n            var url = this.apiUrl + '?' + this.getAllQueryParams()\r\n            this.$http.get(url, this.httpOptions)\r\n                .then(function(response) {\r\n                    var body = this.transform(response.body);\r\n                    self.tableData = self.getObjectValue(body, self.dataPath, null)\r\n                    self.tablePagination = self.getObjectValue(body, self.paginationPath, null)\r\n                    if (self.tablePagination === null) {\r\n                        console.warn('vuetable: pagination-path \"' + self.paginationPath + '\" not found. '\r\n                            + 'It looks like the data returned from the sever does not have pagination information '\r\n                            + 'or you may have set it incorrectly.'\r\n                        )\r\n                    }\r\n\r\n                    self.$nextTick(function() {\r\n                        self.dispatchEvent('load-success', response)\r\n                        self.broadcastEvent('load-success', self.tablePagination)\r\n\r\n                        self.hideLoadingAnimation(wrapper)\r\n                    })\r\n                }, function(response) {\r\n                    self.dispatchEvent('load-error', response)\r\n                    self.broadcastEvent('load-error', response)\r\n\r\n                    self.hideLoadingAnimation(wrapper)\r\n                })\r\n        },\r\n        getAllQueryParams: function() {\r\n            var params = [\r\n                this.queryParams.sort + '=' + this.getSortParam(),\r\n                this.queryParams.page + '=' + this.currentPage,\r\n                this.queryParams.perPage + '=' + this.perPage\r\n            ].join('&')\r\n\r\n            if (this.appendParams.length > 0) {\r\n                params += '&'+this.appendParams.join('&')\r\n            }\r\n\r\n            return params\r\n        },\r\n        showLoadingAnimation: function(wrapper) {\r\n            if (wrapper !== null) {\r\n                this.addClass(wrapper, this.loadingClass)\r\n            }\r\n            this.dispatchEvent('loading')\r\n        },\r\n        hideLoadingAnimation: function(wrapper) {\r\n            if (wrapper !== null) {\r\n                this.removeClass(wrapper, this.loadingClass)\r\n            }\r\n            this.dispatchEvent('loaded')\r\n        },\r\n        transform: function(data) {\r\n          let func = 'transform'\r\n\r\n          if (this.parentFunctionExists(func)) {\r\n              return this.$parent[func].call(this.$parent, data)\r\n          }\r\n\r\n          return data\r\n        },\r\n        parentFunctionExists: function(func) {\r\n          return (func !== '' && typeof this.$parent[func] === 'function')\r\n        },\r\n        getTitle: function(field) {\r\n            if (typeof field.title === 'undefined') {\r\n                return field.name.replace('.', ' ')\r\n            }\r\n            return field.title\r\n        },\r\n        getSortParam: function() {\r\n            if (!this.sortOrder || this.sortOrder.field == '') {\r\n                return ''\r\n            }\r\n\r\n            if (typeof this.$parent['getSortParam'] == 'function') {\r\n                return this.$parent['getSortParam'].call(this.$parent, this.sortOrder)\r\n            }\r\n\r\n            return this.getDefaultSortParam()\r\n        },\r\n        getDefaultSortParam: function() {\r\n            var result = '';\r\n\r\n            for(var i=0; i<this.sortOrder.length; i++){\r\n                var fieldName = (typeof this.sortOrder[i].sortField === 'undefined')\r\n                    ? this.sortOrder[i].field\r\n                    : this.sortOrder[i].sortField;\r\n\r\n                result += fieldName +'|' + this.sortOrder[i].direction + ((i+1)<this.sortOrder.length ? ',' : '');\r\n            }\r\n\r\n            return result;\r\n        },\r\n        addClass: function(el, className) {\r\n            if (el.classList)\r\n              el.classList.add(className)\r\n            else\r\n              el.className += ' ' + className\r\n        },\r\n        removeClass: function(el, className) {\r\n            if (el.classList)\r\n              el.classList.remove(className)\r\n            else\r\n              el.className = el.className.replace(new RegExp('(^|\\\\b)' + className.split(' ').join('|') + '(\\\\b|$)', 'gi'), ' ')\r\n        },\r\n        dispatchEvent: function(eventName, args) {\r\n            this.$dispatch(this.eventPrefix + eventName, args)\r\n        },\r\n        broadcastEvent: function(eventName, args) {\r\n            this.$broadcast(this.eventPrefix + eventName, args)\r\n        },\r\n        orderBy: function(field, event) {\r\n            if ( ! this.isSortable(field)) {\r\n                return\r\n            }\r\n\r\n            var key = this.multiSortKey.toLowerCase() + 'Key'\r\n\r\n            if (this.multiSort && event[key]) { //adding column to multisort\r\n                var i = this.currentSortOrder(field);\r\n\r\n                if (i === false) { //this field is not in the sort array yet\r\n                    this.sortOrder.push({\r\n                        field: field.sortField,\r\n                        direction: 'asc'\r\n                    });\r\n                } else { //this field is in the sort array, now we change its state\r\n                    if (this.sortOrder[i].direction == 'asc'){\r\n                        // switch direction\r\n                        this.sortOrder[i].direction = 'desc'\r\n                    } else {\r\n                        //remove sort condition\r\n                        this.sortOrder.splice(i, 1);\r\n                    }\r\n                }\r\n            } else { //no multisort, or resetting sort\r\n                if (this.sortOrder.length == 0){\r\n                    this.sortOrder.push({\r\n                        field: '',\r\n                        direction: 'asc'\r\n                    });\r\n                }\r\n\r\n                this.sortOrder.splice(1); //removes additional columns\r\n\r\n                if (this.sortOrder[0].field == field.sortField) {\r\n                    // change sort direction\r\n                    this.sortOrder[0].direction = this.sortOrder[0].direction == 'asc' ? 'desc' : 'asc'\r\n                } else {\r\n                    // reset sort direction\r\n                    this.sortOrder[0].direction = 'asc'\r\n                }\r\n                this.sortOrder[0].field = field.sortField\r\n            }\r\n\r\n\r\n            this.currentPage = 1    // reset page index\r\n            this.loadData()\r\n        },\r\n        isSortable: function(field) {\r\n            return !(typeof field.sortField == 'undefined')\r\n        },\r\n        isCurrentSortField: function(field) {\r\n            return this.currentSortOrder(field) !== false;\r\n        },\r\n        currentSortOrder: function(field){\r\n            if (!this.isSortable(field)) {\r\n                return false\r\n            }\r\n\r\n            for(var i = 0; i < this.sortOrder.length; i++){\r\n                if(this.sortOrder[i].field == field.sortField){\r\n                    return i;\r\n                }\r\n            }\r\n\r\n            return false;\r\n        },\r\n        sortIcon: function(field) {\r\n            var i = this.currentSortOrder(field);\r\n            if (i !== false){\r\n                return this.sortOrder[i].direction == 'asc' ?\r\n                    this.ascendingIcon :\r\n                    this.descendingIcon;\r\n            } else {\r\n                return '';\r\n            }\r\n        },\r\n        sortIconOpacity: function(field) {\r\n            //fields with stronger precedence have darker color\r\n\r\n            //if there are few fields, we go down by 0.3\r\n            //ex. 2 fields are selected: 1.0, 0.7\r\n\r\n            //if there are more we go down evenly on the given spectrum\r\n            //ex. 6 fields are selected: 1.0, 0.86, 0.72, 0.58, 0.44, 0.3\r\n\r\n            var max = 1.0;\r\n            var min = 0.3;\r\n            var step = 0.3;\r\n\r\n            var count = this.sortOrder.length;\r\n            var current = this.currentSortOrder(field);\r\n\r\n\r\n            if(max - count*step < min){\r\n               step = (max - min) / (count-1);\r\n            }\r\n\r\n            var opacity = max - current*step;\r\n\r\n            return opacity;\r\n        },\r\n        gotoPreviousPage: function() {\r\n            if (this.currentPage > 1) {\r\n                this.currentPage--\r\n                this.loadData()\r\n            }\r\n        },\r\n        gotoNextPage: function() {\r\n            if (this.currentPage < this.tablePagination.last_page) {\r\n                this.currentPage++\r\n                this.loadData()\r\n            }\r\n        },\r\n        gotoPage: function(page) {\r\n            if (page != this.currentPage && (page > 0 && page <= this.tablePagination.last_page)) {\r\n                this.currentPage = page\r\n                this.loadData()\r\n            }\r\n        },\r\n        isSpecialField: function(fieldName) {\r\n            // return fieldName.startsWith('__')\r\n            return fieldName.slice(0, 2) === '__'\r\n        },\r\n        hasCallback: function(item) {\r\n            return item.callback ? true : false\r\n        },\r\n        callCallback: function(field, item) {\r\n            if ( ! this.hasCallback(field))\r\n                return\r\n\r\n            var args = field.callback.split('|')\r\n            var func = args.shift()\r\n\r\n            if (typeof this.$parent[func] == 'function') {\r\n                return (args.length > 0)\r\n                    ? this.$parent[func].apply(this.$parent, [this.getObjectValue(item, field.name)].concat(args))\r\n                    : this.$parent[func].call(this.$parent, this.getObjectValue(item, field.name))\r\n            }\r\n\r\n            return null\r\n        },\r\n        getObjectValue: function(object, path, defaultValue) {\r\n            defaultValue = (typeof defaultValue == 'undefined') ? null : defaultValue\r\n\r\n            var obj = object\r\n            if (path.trim() != '') {\r\n                var keys = path.split('.')\r\n                keys.forEach(function(key) {\r\n                    if (obj !== null && typeof obj[key] != 'undefined' && obj[key] !== null) {\r\n                        obj = obj[key]\r\n                    } else {\r\n                        obj = defaultValue\r\n                        return\r\n                    }\r\n                })\r\n            }\r\n            return obj\r\n        },\r\n        callAction: function(action, data) {\r\n            this.$dispatch(this.eventPrefix+'action', action, data)\r\n        },\r\n        addParam: function(param) {\r\n            this.appendParams.push(param)\r\n        },\r\n        toggleCheckbox: function(isChecked, dataItem, fieldName) {\r\n            var idColumn = this.extractArgs(fieldName)\r\n            if (idColumn === undefined) {\r\n                console.warn('You did not provide reference id column with \"__checkbox:<column_name>\" field!')\r\n                return\r\n            }\r\n\r\n            var key = dataItem[idColumn]\r\n            if (isChecked) {\r\n                this.selectId(key)\r\n            } else {\r\n                this.unselectId(key)\r\n            }\r\n        },\r\n        toggleAllCheckboxes: function(isChecked, fieldName) {\r\n            var self = this\r\n            var idColumn = this.extractArgs(fieldName)\r\n\r\n            if (isChecked) {\r\n                this.tableData.forEach(function(dataItem) {\r\n                    self.selectId(dataItem[idColumn])\r\n                })\r\n            } else {\r\n                this.tableData.forEach(function(dataItem) {\r\n                    self.unselectId(dataItem[idColumn])\r\n                })\r\n            }\r\n        },\r\n        selectId: function(key) {\r\n            if (! this.isSelectedRow(key)) {\r\n                this.selectedTo.push(key)\r\n            }\r\n        },\r\n        unselectId: function(key) {\r\n            this.selectedTo.$remove(key)\r\n            // this.selectedTo = this.selectedTo.filter(function(item) {\r\n            //     return item !== key\r\n            // })\r\n        },\r\n        isSelectedRow: function(key) {\r\n            return this.selectedTo.indexOf(key) >= 0\r\n        },\r\n        rowSelected: function(dataItem, fieldName) {\r\n            var idColumn = this.extractArgs(fieldName)\r\n            // var key = dataItem[idColumn]\r\n\r\n            return this.isSelectedRow(dataItem[idColumn])\r\n        },\r\n        checkCheckboxesState: function(fieldName) {\r\n            var self = this\r\n            var idColumn = this.extractArgs(fieldName)\r\n            var selector = 'th.checkbox_' + idColumn + ' input[type=checkbox]'\r\n            var els = document.querySelectorAll(selector)\r\n\r\n            // count how many checkbox row in the current page has been checked\r\n            var selected = this.tableData.filter(function(item) {\r\n                return self.selectedTo.indexOf(item[idColumn]) >= 0\r\n            })\r\n\r\n            // count == 0, clear the checkbox\r\n            if (selected.length <= 0) {\r\n                els.forEach(function(el) {\r\n                    el.indeterminate = false\r\n                })\r\n                return false\r\n            }\r\n            // count > 0 and count < perPage, set checkbox state to 'indeterminate'\r\n            else if (selected.length < this.perPage) {\r\n                els.forEach(function(el) {\r\n                    el.indeterminate = true\r\n                })\r\n                return true\r\n            }\r\n            // count == perPage, set checkbox state to 'checked'\r\n            else {\r\n                els.forEach(function(el) {\r\n                    el.indeterminate = false\r\n                })\r\n                return true\r\n            }\r\n        },\r\n        extractName: function(string) {\r\n            return string.split(':')[0].trim()\r\n        },\r\n        extractArgs: function(string) {\r\n            return string.split(':')[1]\r\n        },\r\n        callDetailRowCallback: function(item) {\r\n            var func = this.detailRowCallback.trim()\r\n            if (func === '') {\r\n                return ''\r\n            }\r\n\r\n            if (typeof this.$parent[func] == 'function') {\r\n                return this.$parent[func].call(this.$parent, item)\r\n            } else {\r\n                console.error('Function \"'+func+'()\" does not exist!')\r\n            }\r\n        },\r\n        isVisibleDetailRow: function(rowId) {\r\n            return this.visibleDetailRows.indexOf( rowId ) >= 0\r\n        },\r\n        showDetailRow: function(rowId) {\r\n            if (!this.isVisibleDetailRow(rowId)) {\r\n                this.visibleDetailRows.push(rowId)\r\n            }\r\n        },\r\n        hideDetailRow: function(rowId) {\r\n            if (this.isVisibleDetailRow(rowId)) {\r\n                this.visibleDetailRows.$remove(rowId)\r\n            }\r\n        },\r\n        toggleDetailRow: function(rowId) {\r\n            if (this.isVisibleDetailRow(rowId)) {\r\n                this.hideDetailRow(rowId)\r\n            } else {\r\n                this.showDetailRow(rowId)\r\n            }\r\n        },\r\n        onRowClass: function(dataItem, index) {\r\n            var func = this.rowClassCallback.trim()\r\n\r\n            if (func !== '' && typeof this.$parent[func] === 'function') {\r\n                return this.$parent[func].call(this.$parent, dataItem, index)\r\n            }\r\n            return ''\r\n        },\r\n        onRowChanged: function(dataItem) {\r\n            this.dispatchEvent('row-changed', dataItem)\r\n            return true\r\n        },\r\n        onRowClicked: function(dataItem, event) {\r\n            this.$dispatch(this.eventPrefix+'row-clicked', dataItem, event)\r\n            return true\r\n        },\r\n        onRowDoubleClicked: function(dataItem, event) {\r\n            this.$dispatch(this.eventPrefix + 'row-dblclicked', dataItem, event);\r\n        },\r\n        onCellClicked: function(dataItem, field, event) {\r\n            this.$dispatch(this.eventPrefix+'cell-clicked', dataItem, field, event)\r\n        },\r\n        onCellDoubleClicked: function(dataItem, field, event) {\r\n            this.$dispatch(this.eventPrefix+'cell-dblclicked', dataItem, field, event)\r\n        },\r\n        onDetailRowClick: function(dataItem, event) {\r\n            this.$dispatch(this.eventPrefix+'detail-row-clicked', dataItem, event)\r\n        },\r\n        callPaginationConfig: function() {\r\n            if (typeof this.$parent[this.paginationConfigCallback] === 'function') {\r\n                this.$parent[this.paginationConfigCallback].call(this.$parent, this.$refs.pagination.$options.name)\r\n            }\r\n        },\r\n        logDeprecatedMessage: function(name, replacer) {\r\n            var msg = '\"{name}\" prop is being deprecated and will be removed in the future. Please use \"{replacer}\" instead.'\r\n            console.warn(msg.replace('{name}', name).replace('{replacer}', replacer))\r\n        },\r\n        checkForDeprecatedProps: function() {\r\n            if (this.paginationConfig !== 'paginationConfig') {\r\n                this.logDeprecatedMessage('paginationConfig', 'paginationConfigCallback')\r\n            }\r\n            if (this.detailRow !== '') {\r\n                this.logDeprecatedMessage('detail-row', 'detail-row-callback')\r\n            }\r\n            if (this.detailRowCallback !== '') {\r\n                this.logDeprecatedMessage('detail-row-callback', 'detail-row-component')\r\n            }\r\n        }\r\n    },\r\n    watch: {\r\n        'multiSort': function(newVal, oldVal){\r\n            if (newVal === false && this.sortOrder.length > 1) {\r\n                this.sortOrder.splice(1);\r\n                this.loadData();\r\n            }\r\n        }\r\n    },\r\n    events: {\r\n        'vuetable-pagination:change-page': function(page) {\r\n            if (page == 'prev') {\r\n                this.gotoPreviousPage()\r\n            } else if (page == 'next') {\r\n                this.gotoNextPage()\r\n            } else {\r\n                this.gotoPage(page)\r\n            }\r\n        },\r\n        'vuetable:reload': function() {\r\n            this.loadData()\r\n        },\r\n        'vuetable:refresh': function() {\r\n            this.currentPage = 1\r\n            this.loadData()\r\n        },\r\n        'vuetable:goto-page': function(page) {\r\n            this.$emit('vuetable-pagination:change-page', page)\r\n        },\r\n        'vuetable:set-options': function(options) {\r\n            for (var n in options) {\r\n                this.$set(n, options[n])\r\n            }\r\n        },\r\n        'vuetable:toggle-detail': function(dataItem) {\r\n            this.toggleDetailRow(dataItem)\r\n        },\r\n        'vuetable:show-detail': function(dataItem) {\r\n            this.showDetailRow(dataItem)\r\n        },\r\n        'vuetable:hide-detail': function(dataItem) {\r\n            this.hideDetailRow(dataItem)\r\n        },\r\n        'vuetable:normalize-fields': function() {\r\n            this.normalizeFields()\r\n        }\r\n    },\r\n    created: function() {\r\n        this.checkForDeprecatedProps()\r\n        this.normalizeFields()\r\n        if (this.loadOnStart) {\r\n            this.loadData()\r\n        }\r\n        this.$nextTick(function() {\r\n            this.callPaginationConfig()\r\n        })\r\n    }\r\n}\r\n",{"version":3,"sources":["Vuetable.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Vuetable.vue","sourceRoot":"node_modules/vuetable/src/components","sourcesContent":["<template>\r\n    <div class=\"{{wrapperClass}}\">\r\n        <table class=\"vuetable {{tableClass}}\">\r\n            <thead>\r\n                <tr>\r\n                    <template v-for=\"field in fields\">\r\n                        <template v-if=\"field.visible\">\r\n                            <template v-if=\"isSpecialField(field.name)\">\r\n                                <th v-if=\"extractName(field.name) == '__checkbox'\"\r\n                                    :class=\"[field.titleClass, 'checkbox_'+extractArgs(field.name)]\">\r\n                                    <input type=\"checkbox\" @change=\"toggleAllCheckboxes($event.target.checked, field.name)\"\r\n                                        :checked=\"checkCheckboxesState(field.name)\">\r\n                                </th>\r\n                                <th v-if=\"extractName(field.name) == '__component'\"\r\n                                    @click=\"orderBy(field, $event)\"\r\n                                    class=\"{{field.titleClass || ''}} {{isSortable(field) ? 'sortable' : ''}}\">\r\n                                    {{field.title || ''}}\r\n                                    <i v-if=\"isCurrentSortField(field) && field.title\"\r\n                                       class=\"{{ sortIcon(field) }}\"\r\n                                       :style=\"{opacity: sortIconOpacity(field)}\"></i>\r\n                                </th>\r\n                                <th v-if=\"notIn(extractName(field.name), ['__checkbox', '__component'])\"\r\n                                    id=\"{{field.name}}\" class=\"{{field.titleClass || ''}}\">\r\n                                    {{field.title || ''}}\r\n                                </th>\r\n                            </template>\r\n                            <template v-else>\r\n                                <th @click=\"orderBy(field, $event)\"\r\n                                    id=\"_{{field.name}}\"\r\n                                    class=\"{{field.titleClass || ''}} {{isSortable(field) ? 'sortable' : ''}}\">\r\n                                    {{getTitle(field) | capitalize}}&nbsp;\r\n                                    <i v-if=\"isCurrentSortField(field)\" class=\"{{ sortIcon(field) }}\" :style=\"{opacity: sortIconOpacity(field)}\"></i>\r\n                                </th>\r\n                            </template>\r\n                        </template>\r\n                    </template>\r\n                </tr>\r\n            </thead>\r\n            <tbody v-cloak>\r\n                <template v-for=\"(itemNumber, item) in tableData\">\r\n                    <tr @dblClick=\"onRowDoubleClicked(item, $event)\" @click=\"onRowClicked(item, $event)\" :render=\"onRowChanged(item)\" :class=\"onRowClass(item, itemNumber)\">\r\n                        <template v-for=\"field in fields\">\r\n                            <template v-if=\"field.visible\">\r\n                                <template v-if=\"isSpecialField(field.name)\">\r\n                                    <td v-if=\"extractName(field.name) == '__sequence'\" class=\"vuetable-sequence {{field.dataClass}}\"\r\n                                        v-html=\"tablePagination.from + itemNumber\">\r\n                                    </td>\r\n                                    <td v-if=\"extractName(field.name) == '__checkbox'\" class=\"vuetable-checkboxes {{field.dataClass}}\">\r\n                                        <input type=\"checkbox\"\r\n                                            @change=\"toggleCheckbox($event.target.checked, item, field.name)\"\r\n                                            :checked=\"rowSelected(item, field.name)\">\r\n                                    </td>\r\n                                    <td v-if=\"field.name == '__actions'\" class=\"vuetable-actions {{field.dataClass}}\">\r\n                                        <template v-for=\"action in itemActions\">\r\n                                            <button class=\"{{ action.class }}\" @click=\"callAction(action.name, item)\" v-attr=\"action.extra\">\r\n                                                <i class=\"{{ action.icon }}\"></i> {{ action.label }}\r\n                                            </button>\r\n                                        </template>\r\n                                    </td>\r\n                                    <td v-if=\"extractName(field.name) == '__component'\" class=\"{{field.dataClass}}\">\r\n                                        <component :is=\"extractArgs(field.name)\" :row-data=\"item\" :row-index=\"itemNumber\"></component>\r\n                                    </td>\r\n                                </template>\r\n                                <template v-else>\r\n                                    <td v-if=\"hasCallback(field)\" class=\"{{field.dataClass}}\" @click=\"onCellClicked(item, field, $event)\" @dblclick=\"onCellDoubleClicked(item, field, $event)\">\r\n                                        {{{ callCallback(field, item) }}}\r\n                                    </td>\r\n                                    <td v-else class=\"{{field.dataClass}}\" @click=\"onCellClicked(item, field, $event)\" @dblclick=\"onCellDoubleClicked(item, field, $event)\">\r\n                                        {{{ getObjectValue(item, field.name, \"\") }}}\r\n                                    </td>\r\n                                </template>\r\n                            </template>\r\n                        </template>\r\n                    </tr>\r\n                    <template v-if=\"useDetailRow\">\r\n                      <template v-if=\"useDetailRowComponent\">\r\n                        <tr v-if=\"isVisibleDetailRow(item[detailRowId])\"\r\n                          @click=\"onDetailRowClick(item, $event)\"\r\n                          :transition=\"detailRowTransition\"\r\n                          :class=\"[detailRowClass]\"\r\n                        >\r\n                          <td :colspan=\"countVisibleFields\">\r\n                            <component :is=\"detailRowComponent\" :row-data=\"item\" :row-index=\"itemNumber\"></component>\r\n                          </td>\r\n                        </tr>\r\n                      </template>\r\n                      <template v-else>\r\n                        <tr v-if=\"isVisibleDetailRow(item[detailRowId])\"\r\n                          v-html=\"callDetailRowCallback(item)\"\r\n                          @click=\"onDetailRowClick(item, $event)\"\r\n                          :transition=\"detailRowTransition\"\r\n                          :class=\"[detailRowClass]\"\r\n                        ></tr>\r\n                      </template>\r\n                    </template>\r\n                </template>\r\n            </tbody>\r\n        </table>\r\n        <div v-if=\"showPagination\" class=\"vuetable-pagination {{paginationClass}}\">\r\n            <div class=\"vuetable-pagination-info {{paginationInfoClass}}\"\r\n                 v-html=\"paginationInfo\">\r\n            </div>\r\n            <div v-show=\"tablePagination && tablePagination.last_page > 1\"\r\n                class=\"vuetable-pagination-component {{paginationComponentClass}}\">\r\n                <component v-ref:pagination :is=\"paginationComponent\"></component>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n    props: {\r\n        wrapperClass: {\r\n            type: String,\r\n            default: function() {\r\n                return null\r\n            }\r\n        },\r\n        tableWrapper: {\r\n            type: String,\r\n            default: function() {\r\n                return null\r\n            }\r\n        },\r\n        tableClass: {\r\n            type: String,\r\n            default: function() {\r\n                return 'ui blue striped selectable celled stackable attached table'\r\n            }\r\n        },\r\n        loadingClass: {\r\n            type: String,\r\n            default: function() {\r\n                return 'loading'\r\n            }\r\n        },\r\n        dataPath: {\r\n            type: String,\r\n            default: function() {\r\n                return 'data'\r\n            }\r\n        },\r\n        paginationPath: {\r\n            type: String,\r\n            default: function() {\r\n                return 'links.pagination'\r\n            }\r\n        },\r\n        fields: {\r\n            type: Array,\r\n            required: true\r\n        },\r\n        apiUrl: {\r\n            type: String,\r\n            required: true\r\n        },\r\n        sortOrder: {\r\n            type: Array,\r\n            default: function() {\r\n                return [];\r\n            }\r\n        },\r\n        multiSort: {\r\n            type: Boolean,\r\n            default: function() {\r\n                return false\r\n            }\r\n        },\r\n        /*\r\n         * physical key that will trigger multi-sort option\r\n         * possible values: 'alt', 'ctrl', 'meta', 'shift'\r\n         * 'ctrl' might not work as expected on Mac\r\n         */\r\n        multiSortKey: {\r\n            type: String,\r\n            default: 'alt'\r\n        },\r\n        perPage: {\r\n            type: Number,\r\n            coerce: function(val) {\r\n                return parseInt(val)\r\n            },\r\n            default: function() {\r\n                return 10\r\n            }\r\n        },\r\n        ascendingIcon: {\r\n            type: String,\r\n            default: function() {\r\n                return 'blue chevron up icon'\r\n            }\r\n        },\r\n        descendingIcon: {\r\n            type: String,\r\n            default: function() {\r\n                return 'blue chevron down icon'\r\n            }\r\n        },\r\n        appendParams: {\r\n            type: Array,\r\n            default: function() {\r\n                return []\r\n            }\r\n        },\r\n        showPagination: {\r\n            type: Boolean,\r\n            default: function() {\r\n                return true\r\n            }\r\n        },\r\n        paginationComponent: {\r\n            type: String,\r\n            default: function() {\r\n                return 'vuetable-pagination'\r\n            }\r\n        },\r\n        paginationInfoTemplate: {\r\n            type: String,\r\n            default: function() {\r\n                return \"Displaying {from} to {to} of {total} items\"\r\n            }\r\n        },\r\n        paginationInfoNoDataTemplate: {\r\n            type: String,\r\n            default: function() {\r\n                return 'No relevant data'\r\n            }\r\n        },\r\n        paginationClass: {\r\n            type: String,\r\n            default: function() {\r\n                return 'ui bottom attached segment grid'\r\n            }\r\n        },\r\n        paginationInfoClass: {\r\n            type: String,\r\n            default: function() {\r\n                return 'left floated left aligned six wide column'\r\n            }\r\n        },\r\n        paginationComponentClass: {\r\n            type: String,\r\n            default: function() {\r\n                return 'right floated right aligned six wide column'\r\n            }\r\n        },\r\n        paginationConfig: {\r\n            type: String,\r\n            default: function() {\r\n                return 'paginationConfig'\r\n            }\r\n        },\r\n        paginationConfigCallback: {\r\n            type: String,\r\n            default: function() {\r\n                return 'paginationConfig'\r\n            }\r\n        },\r\n        itemActions: {\r\n            type: Array,\r\n            default: function() {\r\n                return []\r\n            }\r\n        },\r\n        queryParams: {\r\n            type: Object,\r\n            default: function() {\r\n                return {\r\n                    sort: 'sort',\r\n                    page: 'page',\r\n                    perPage: 'per_page'\r\n                }\r\n            }\r\n        },\r\n        loadOnStart: {\r\n            type: Boolean,\r\n            default: function() {\r\n                return true\r\n            }\r\n        },\r\n        selectedTo: {\r\n            type: Array,\r\n            default: function() {\r\n                return []\r\n            }\r\n        },\r\n        httpOptions: {\r\n            type: Object,\r\n            default: function() {\r\n                return {}\r\n            }\r\n        },\r\n        detailRow: {\r\n            type: String,\r\n            default: ''\r\n        },\r\n        detailRowCallback: {\r\n            type: String,\r\n            default: ''\r\n        },\r\n        detailRowId: {\r\n            type: String,\r\n            default: 'id'\r\n        },\r\n        detailRowTransition: {\r\n            type: String,\r\n            default: ''\r\n        },\r\n        detailRowClass: {\r\n            type: String,\r\n            default: 'vuetable-detail-row'\r\n        },\r\n        detailRowComponent: {\r\n            type: String,\r\n            default: ''\r\n        },\r\n        rowClassCallback: {\r\n            type: String,\r\n            default: ''\r\n        },\r\n    },\r\n    data: function() {\r\n        return {\r\n            eventPrefix: 'vuetable:',\r\n            tableData: null,\r\n            tablePagination: null,\r\n            currentPage: 1,\r\n            visibleDetailRows: []\r\n        }\r\n    },\r\n    directives: {\r\n        'attr': {\r\n            update: function(value) {\r\n                for (var i in value) {\r\n                    this.el.setAttribute(i, value[i])\r\n                }\r\n            }\r\n        },\r\n    },\r\n    computed: {\r\n        paginationInfo: function() {\r\n            if (this.tablePagination == null || this.tablePagination.total == 0) {\r\n                return this.paginationInfoNoDataTemplate\r\n            }\r\n\r\n            return this.paginationInfoTemplate\r\n                .replace('{from}', this.tablePagination.from || 0)\r\n                .replace('{to}', this.tablePagination.to || 0)\r\n                .replace('{total}', this.tablePagination.total || 0)\r\n        },\r\n        useDetailRow: function() {\r\n            if (this.tableData && typeof this.tableData[0][this.detailRowId] === 'undefined') {\r\n                console.warn('You need to define \"detail-row-id\" in order for detail-row feature to work!')\r\n                return false\r\n            }\r\n\r\n            return this.detailRowCallback.trim() !== '' || this.detailRowComponent !== ''\r\n        },\r\n        useDetailRowComponent: function() {\r\n            return this.detailRowComponent !== ''\r\n        },\r\n        countVisibleFields: function() {\r\n            return this.fields.filter(function (field) {\r\n                return field.visible\r\n            }).length\r\n        }\r\n    },\r\n    methods: {\r\n        normalizeFields: function() {\r\n            var self = this\r\n            var obj\r\n            this.fields.forEach(function(field, i) {\r\n                if (typeof (field) === 'string') {\r\n                    obj = {\r\n                        name: field,\r\n                        title: self.setTitle(field),\r\n                        titleClass: '',\r\n                        dataClass: '',\r\n                        callback: null,\r\n                        visible: true\r\n                    }\r\n                } else {\r\n                    obj = {\r\n                        name: field.name,\r\n                        title: (field.title === undefined) ? self.setTitle(field.name) : field.title,\r\n                        sortField: field.sortField,\r\n                        titleClass: (field.titleClass === undefined) ? '' : field.titleClass,\r\n                        dataClass: (field.dataClass === undefined) ? '' : field.dataClass,\r\n                        callback: (field.callback === undefined) ? '' : field.callback,\r\n                        visible: (field.visible === undefined) ? true : field.visible\r\n                    }\r\n                }\r\n                self.fields.$set(i, obj)\r\n            })\r\n        },\r\n        setTitle: function(str) {\r\n            if (this.isSpecialField(str)) {\r\n                return ''\r\n            }\r\n\r\n            return this.titleCase(str)\r\n        },\r\n        titleCase: function(str)\r\n        {\r\n            return str.replace(/\\w+/g, function(txt){\r\n                return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase()\r\n            })\r\n        },\r\n        notIn: function(str, arr) {\r\n            return arr.indexOf(str) === -1\r\n        },\r\n        loadData: function() {\r\n            var self = this\r\n\r\n            var wrapper = document.querySelector(this.tableWrapper)\r\n            this.showLoadingAnimation(wrapper)\r\n\r\n            var url = this.apiUrl + '?' + this.getAllQueryParams()\r\n            this.$http.get(url, this.httpOptions)\r\n                .then(function(response) {\r\n                    var body = this.transform(response.body);\r\n                    self.tableData = self.getObjectValue(body, self.dataPath, null)\r\n                    self.tablePagination = self.getObjectValue(body, self.paginationPath, null)\r\n                    if (self.tablePagination === null) {\r\n                        console.warn('vuetable: pagination-path \"' + self.paginationPath + '\" not found. '\r\n                            + 'It looks like the data returned from the sever does not have pagination information '\r\n                            + 'or you may have set it incorrectly.'\r\n                        )\r\n                    }\r\n\r\n                    self.$nextTick(function() {\r\n                        self.dispatchEvent('load-success', response)\r\n                        self.broadcastEvent('load-success', self.tablePagination)\r\n\r\n                        self.hideLoadingAnimation(wrapper)\r\n                    })\r\n                }, function(response) {\r\n                    self.dispatchEvent('load-error', response)\r\n                    self.broadcastEvent('load-error', response)\r\n\r\n                    self.hideLoadingAnimation(wrapper)\r\n                })\r\n        },\r\n        getAllQueryParams: function() {\r\n            var params = [\r\n                this.queryParams.sort + '=' + this.getSortParam(),\r\n                this.queryParams.page + '=' + this.currentPage,\r\n                this.queryParams.perPage + '=' + this.perPage\r\n            ].join('&')\r\n\r\n            if (this.appendParams.length > 0) {\r\n                params += '&'+this.appendParams.join('&')\r\n            }\r\n\r\n            return params\r\n        },\r\n        showLoadingAnimation: function(wrapper) {\r\n            if (wrapper !== null) {\r\n                this.addClass(wrapper, this.loadingClass)\r\n            }\r\n            this.dispatchEvent('loading')\r\n        },\r\n        hideLoadingAnimation: function(wrapper) {\r\n            if (wrapper !== null) {\r\n                this.removeClass(wrapper, this.loadingClass)\r\n            }\r\n            this.dispatchEvent('loaded')\r\n        },\r\n        transform: function(data) {\r\n          let func = 'transform'\r\n\r\n          if (this.parentFunctionExists(func)) {\r\n              return this.$parent[func].call(this.$parent, data)\r\n          }\r\n\r\n          return data\r\n        },\r\n        parentFunctionExists: function(func) {\r\n          return (func !== '' && typeof this.$parent[func] === 'function')\r\n        },\r\n        getTitle: function(field) {\r\n            if (typeof field.title === 'undefined') {\r\n                return field.name.replace('.', ' ')\r\n            }\r\n            return field.title\r\n        },\r\n        getSortParam: function() {\r\n            if (!this.sortOrder || this.sortOrder.field == '') {\r\n                return ''\r\n            }\r\n\r\n            if (typeof this.$parent['getSortParam'] == 'function') {\r\n                return this.$parent['getSortParam'].call(this.$parent, this.sortOrder)\r\n            }\r\n\r\n            return this.getDefaultSortParam()\r\n        },\r\n        getDefaultSortParam: function() {\r\n            var result = '';\r\n\r\n            for(var i=0; i<this.sortOrder.length; i++){\r\n                var fieldName = (typeof this.sortOrder[i].sortField === 'undefined')\r\n                    ? this.sortOrder[i].field\r\n                    : this.sortOrder[i].sortField;\r\n\r\n                result += fieldName +'|' + this.sortOrder[i].direction + ((i+1)<this.sortOrder.length ? ',' : '');\r\n            }\r\n\r\n            return result;\r\n        },\r\n        addClass: function(el, className) {\r\n            if (el.classList)\r\n              el.classList.add(className)\r\n            else\r\n              el.className += ' ' + className\r\n        },\r\n        removeClass: function(el, className) {\r\n            if (el.classList)\r\n              el.classList.remove(className)\r\n            else\r\n              el.className = el.className.replace(new RegExp('(^|\\\\b)' + className.split(' ').join('|') + '(\\\\b|$)', 'gi'), ' ')\r\n        },\r\n        dispatchEvent: function(eventName, args) {\r\n            this.$dispatch(this.eventPrefix + eventName, args)\r\n        },\r\n        broadcastEvent: function(eventName, args) {\r\n            this.$broadcast(this.eventPrefix + eventName, args)\r\n        },\r\n        orderBy: function(field, event) {\r\n            if ( ! this.isSortable(field)) {\r\n                return\r\n            }\r\n\r\n            var key = this.multiSortKey.toLowerCase() + 'Key'\r\n\r\n            if (this.multiSort && event[key]) { //adding column to multisort\r\n                var i = this.currentSortOrder(field);\r\n\r\n                if (i === false) { //this field is not in the sort array yet\r\n                    this.sortOrder.push({\r\n                        field: field.sortField,\r\n                        direction: 'asc'\r\n                    });\r\n                } else { //this field is in the sort array, now we change its state\r\n                    if (this.sortOrder[i].direction == 'asc'){\r\n                        // switch direction\r\n                        this.sortOrder[i].direction = 'desc'\r\n                    } else {\r\n                        //remove sort condition\r\n                        this.sortOrder.splice(i, 1);\r\n                    }\r\n                }\r\n            } else { //no multisort, or resetting sort\r\n                if (this.sortOrder.length == 0){\r\n                    this.sortOrder.push({\r\n                        field: '',\r\n                        direction: 'asc'\r\n                    });\r\n                }\r\n\r\n                this.sortOrder.splice(1); //removes additional columns\r\n\r\n                if (this.sortOrder[0].field == field.sortField) {\r\n                    // change sort direction\r\n                    this.sortOrder[0].direction = this.sortOrder[0].direction == 'asc' ? 'desc' : 'asc'\r\n                } else {\r\n                    // reset sort direction\r\n                    this.sortOrder[0].direction = 'asc'\r\n                }\r\n                this.sortOrder[0].field = field.sortField\r\n            }\r\n\r\n\r\n            this.currentPage = 1    // reset page index\r\n            this.loadData()\r\n        },\r\n        isSortable: function(field) {\r\n            return !(typeof field.sortField == 'undefined')\r\n        },\r\n        isCurrentSortField: function(field) {\r\n            return this.currentSortOrder(field) !== false;\r\n        },\r\n        currentSortOrder: function(field){\r\n            if (!this.isSortable(field)) {\r\n                return false\r\n            }\r\n\r\n            for(var i = 0; i < this.sortOrder.length; i++){\r\n                if(this.sortOrder[i].field == field.sortField){\r\n                    return i;\r\n                }\r\n            }\r\n\r\n            return false;\r\n        },\r\n        sortIcon: function(field) {\r\n            var i = this.currentSortOrder(field);\r\n            if (i !== false){\r\n                return this.sortOrder[i].direction == 'asc' ?\r\n                    this.ascendingIcon :\r\n                    this.descendingIcon;\r\n            } else {\r\n                return '';\r\n            }\r\n        },\r\n        sortIconOpacity: function(field) {\r\n            //fields with stronger precedence have darker color\r\n\r\n            //if there are few fields, we go down by 0.3\r\n            //ex. 2 fields are selected: 1.0, 0.7\r\n\r\n            //if there are more we go down evenly on the given spectrum\r\n            //ex. 6 fields are selected: 1.0, 0.86, 0.72, 0.58, 0.44, 0.3\r\n\r\n            var max = 1.0;\r\n            var min = 0.3;\r\n            var step = 0.3;\r\n\r\n            var count = this.sortOrder.length;\r\n            var current = this.currentSortOrder(field);\r\n\r\n\r\n            if(max - count*step < min){\r\n               step = (max - min) / (count-1);\r\n            }\r\n\r\n            var opacity = max - current*step;\r\n\r\n            return opacity;\r\n        },\r\n        gotoPreviousPage: function() {\r\n            if (this.currentPage > 1) {\r\n                this.currentPage--\r\n                this.loadData()\r\n            }\r\n        },\r\n        gotoNextPage: function() {\r\n            if (this.currentPage < this.tablePagination.last_page) {\r\n                this.currentPage++\r\n                this.loadData()\r\n            }\r\n        },\r\n        gotoPage: function(page) {\r\n            if (page != this.currentPage && (page > 0 && page <= this.tablePagination.last_page)) {\r\n                this.currentPage = page\r\n                this.loadData()\r\n            }\r\n        },\r\n        isSpecialField: function(fieldName) {\r\n            // return fieldName.startsWith('__')\r\n            return fieldName.slice(0, 2) === '__'\r\n        },\r\n        hasCallback: function(item) {\r\n            return item.callback ? true : false\r\n        },\r\n        callCallback: function(field, item) {\r\n            if ( ! this.hasCallback(field))\r\n                return\r\n\r\n            var args = field.callback.split('|')\r\n            var func = args.shift()\r\n\r\n            if (typeof this.$parent[func] == 'function') {\r\n                return (args.length > 0)\r\n                    ? this.$parent[func].apply(this.$parent, [this.getObjectValue(item, field.name)].concat(args))\r\n                    : this.$parent[func].call(this.$parent, this.getObjectValue(item, field.name))\r\n            }\r\n\r\n            return null\r\n        },\r\n        getObjectValue: function(object, path, defaultValue) {\r\n            defaultValue = (typeof defaultValue == 'undefined') ? null : defaultValue\r\n\r\n            var obj = object\r\n            if (path.trim() != '') {\r\n                var keys = path.split('.')\r\n                keys.forEach(function(key) {\r\n                    if (obj !== null && typeof obj[key] != 'undefined' && obj[key] !== null) {\r\n                        obj = obj[key]\r\n                    } else {\r\n                        obj = defaultValue\r\n                        return\r\n                    }\r\n                })\r\n            }\r\n            return obj\r\n        },\r\n        callAction: function(action, data) {\r\n            this.$dispatch(this.eventPrefix+'action', action, data)\r\n        },\r\n        addParam: function(param) {\r\n            this.appendParams.push(param)\r\n        },\r\n        toggleCheckbox: function(isChecked, dataItem, fieldName) {\r\n            var idColumn = this.extractArgs(fieldName)\r\n            if (idColumn === undefined) {\r\n                console.warn('You did not provide reference id column with \"__checkbox:<column_name>\" field!')\r\n                return\r\n            }\r\n\r\n            var key = dataItem[idColumn]\r\n            if (isChecked) {\r\n                this.selectId(key)\r\n            } else {\r\n                this.unselectId(key)\r\n            }\r\n        },\r\n        toggleAllCheckboxes: function(isChecked, fieldName) {\r\n            var self = this\r\n            var idColumn = this.extractArgs(fieldName)\r\n\r\n            if (isChecked) {\r\n                this.tableData.forEach(function(dataItem) {\r\n                    self.selectId(dataItem[idColumn])\r\n                })\r\n            } else {\r\n                this.tableData.forEach(function(dataItem) {\r\n                    self.unselectId(dataItem[idColumn])\r\n                })\r\n            }\r\n        },\r\n        selectId: function(key) {\r\n            if (! this.isSelectedRow(key)) {\r\n                this.selectedTo.push(key)\r\n            }\r\n        },\r\n        unselectId: function(key) {\r\n            this.selectedTo.$remove(key)\r\n            // this.selectedTo = this.selectedTo.filter(function(item) {\r\n            //     return item !== key\r\n            // })\r\n        },\r\n        isSelectedRow: function(key) {\r\n            return this.selectedTo.indexOf(key) >= 0\r\n        },\r\n        rowSelected: function(dataItem, fieldName) {\r\n            var idColumn = this.extractArgs(fieldName)\r\n            // var key = dataItem[idColumn]\r\n\r\n            return this.isSelectedRow(dataItem[idColumn])\r\n        },\r\n        checkCheckboxesState: function(fieldName) {\r\n            var self = this\r\n            var idColumn = this.extractArgs(fieldName)\r\n            var selector = 'th.checkbox_' + idColumn + ' input[type=checkbox]'\r\n            var els = document.querySelectorAll(selector)\r\n\r\n            // count how many checkbox row in the current page has been checked\r\n            var selected = this.tableData.filter(function(item) {\r\n                return self.selectedTo.indexOf(item[idColumn]) >= 0\r\n            })\r\n\r\n            // count == 0, clear the checkbox\r\n            if (selected.length <= 0) {\r\n                els.forEach(function(el) {\r\n                    el.indeterminate = false\r\n                })\r\n                return false\r\n            }\r\n            // count > 0 and count < perPage, set checkbox state to 'indeterminate'\r\n            else if (selected.length < this.perPage) {\r\n                els.forEach(function(el) {\r\n                    el.indeterminate = true\r\n                })\r\n                return true\r\n            }\r\n            // count == perPage, set checkbox state to 'checked'\r\n            else {\r\n                els.forEach(function(el) {\r\n                    el.indeterminate = false\r\n                })\r\n                return true\r\n            }\r\n        },\r\n        extractName: function(string) {\r\n            return string.split(':')[0].trim()\r\n        },\r\n        extractArgs: function(string) {\r\n            return string.split(':')[1]\r\n        },\r\n        callDetailRowCallback: function(item) {\r\n            var func = this.detailRowCallback.trim()\r\n            if (func === '') {\r\n                return ''\r\n            }\r\n\r\n            if (typeof this.$parent[func] == 'function') {\r\n                return this.$parent[func].call(this.$parent, item)\r\n            } else {\r\n                console.error('Function \"'+func+'()\" does not exist!')\r\n            }\r\n        },\r\n        isVisibleDetailRow: function(rowId) {\r\n            return this.visibleDetailRows.indexOf( rowId ) >= 0\r\n        },\r\n        showDetailRow: function(rowId) {\r\n            if (!this.isVisibleDetailRow(rowId)) {\r\n                this.visibleDetailRows.push(rowId)\r\n            }\r\n        },\r\n        hideDetailRow: function(rowId) {\r\n            if (this.isVisibleDetailRow(rowId)) {\r\n                this.visibleDetailRows.$remove(rowId)\r\n            }\r\n        },\r\n        toggleDetailRow: function(rowId) {\r\n            if (this.isVisibleDetailRow(rowId)) {\r\n                this.hideDetailRow(rowId)\r\n            } else {\r\n                this.showDetailRow(rowId)\r\n            }\r\n        },\r\n        onRowClass: function(dataItem, index) {\r\n            var func = this.rowClassCallback.trim()\r\n\r\n            if (func !== '' && typeof this.$parent[func] === 'function') {\r\n                return this.$parent[func].call(this.$parent, dataItem, index)\r\n            }\r\n            return ''\r\n        },\r\n        onRowChanged: function(dataItem) {\r\n            this.dispatchEvent('row-changed', dataItem)\r\n            return true\r\n        },\r\n        onRowClicked: function(dataItem, event) {\r\n            this.$dispatch(this.eventPrefix+'row-clicked', dataItem, event)\r\n            return true\r\n        },\r\n        onRowDoubleClicked: function(dataItem, event) {\r\n            this.$dispatch(this.eventPrefix + 'row-dblclicked', dataItem, event);\r\n        },\r\n        onCellClicked: function(dataItem, field, event) {\r\n            this.$dispatch(this.eventPrefix+'cell-clicked', dataItem, field, event)\r\n        },\r\n        onCellDoubleClicked: function(dataItem, field, event) {\r\n            this.$dispatch(this.eventPrefix+'cell-dblclicked', dataItem, field, event)\r\n        },\r\n        onDetailRowClick: function(dataItem, event) {\r\n            this.$dispatch(this.eventPrefix+'detail-row-clicked', dataItem, event)\r\n        },\r\n        callPaginationConfig: function() {\r\n            if (typeof this.$parent[this.paginationConfigCallback] === 'function') {\r\n                this.$parent[this.paginationConfigCallback].call(this.$parent, this.$refs.pagination.$options.name)\r\n            }\r\n        },\r\n        logDeprecatedMessage: function(name, replacer) {\r\n            var msg = '\"{name}\" prop is being deprecated and will be removed in the future. Please use \"{replacer}\" instead.'\r\n            console.warn(msg.replace('{name}', name).replace('{replacer}', replacer))\r\n        },\r\n        checkForDeprecatedProps: function() {\r\n            if (this.paginationConfig !== 'paginationConfig') {\r\n                this.logDeprecatedMessage('paginationConfig', 'paginationConfigCallback')\r\n            }\r\n            if (this.detailRow !== '') {\r\n                this.logDeprecatedMessage('detail-row', 'detail-row-callback')\r\n            }\r\n            if (this.detailRowCallback !== '') {\r\n                this.logDeprecatedMessage('detail-row-callback', 'detail-row-component')\r\n            }\r\n        }\r\n    },\r\n    watch: {\r\n        'multiSort': function(newVal, oldVal){\r\n            if (newVal === false && this.sortOrder.length > 1) {\r\n                this.sortOrder.splice(1);\r\n                this.loadData();\r\n            }\r\n        }\r\n    },\r\n    events: {\r\n        'vuetable-pagination:change-page': function(page) {\r\n            if (page == 'prev') {\r\n                this.gotoPreviousPage()\r\n            } else if (page == 'next') {\r\n                this.gotoNextPage()\r\n            } else {\r\n                this.gotoPage(page)\r\n            }\r\n        },\r\n        'vuetable:reload': function() {\r\n            this.loadData()\r\n        },\r\n        'vuetable:refresh': function() {\r\n            this.currentPage = 1\r\n            this.loadData()\r\n        },\r\n        'vuetable:goto-page': function(page) {\r\n            this.$emit('vuetable-pagination:change-page', page)\r\n        },\r\n        'vuetable:set-options': function(options) {\r\n            for (var n in options) {\r\n                this.$set(n, options[n])\r\n            }\r\n        },\r\n        'vuetable:toggle-detail': function(dataItem) {\r\n            this.toggleDetailRow(dataItem)\r\n        },\r\n        'vuetable:show-detail': function(dataItem) {\r\n            this.showDetailRow(dataItem)\r\n        },\r\n        'vuetable:hide-detail': function(dataItem) {\r\n            this.hideDetailRow(dataItem)\r\n        },\r\n        'vuetable:normalize-fields': function() {\r\n            this.normalizeFields()\r\n        }\r\n    },\r\n    created: function() {\r\n        this.checkForDeprecatedProps()\r\n        this.normalizeFields()\r\n        if (this.loadOnStart) {\r\n            this.loadData()\r\n        }\r\n        this.$nextTick(function() {\r\n            this.callPaginationConfig()\r\n        })\r\n    }\r\n}\r\n</script>\r\n\r\n<style>\r\n    .vuetable th.sortable:hover {\r\n      color: #2185d0;\r\n      cursor: pointer;\r\n    }\r\n    .vuetable-actions {\r\n      width: 15%;\r\n      padding: 12px 0px;\r\n      text-align: center;\r\n    }\r\n    .vuetable-pagination {\r\n      background: #f9fafb !important;\r\n    }\r\n    .vuetable-pagination-info {\r\n      margin-top: auto;\r\n      margin-bottom: auto;\r\n    }\r\n</style>\r\n"]}]}